server:
    port: 8081
spring:
    application:
        name: USERSERVICE
    datasource:
        url: jdbc:postgresql://localhost:5432/microservice
        username: postgres
        password: password
        driver-class-name: org.postgresql.Driver
    config:
        import: configserver:http://localhost:8085
    # profiles:
    #     active: prod
    security:
      oauth2:
        resourceserver:
          jwt:
            issuer-uri:  https://dev-85492826.okta.com/oauth2/default
        client:
          registration:
            my-internal-client:
              provider: okta
              authorization-grant-type: client_crendentials
              client-id: 0oai9djxt0QuHtCmk5d7
              client-secret: Xrry9fLwUpcV4eTRlZQcOUq9HyhrnmyfVhDwFA3vgyKErZRR5RwvkvGhZHtG1536
              scopes: internal             
          provider:
            okta:
              issuer-uri: https://dev-85492826.okta.com/oauth2/default
    
    jpa:  
        hibernate:
            ddl-auto: update
        show-sql: true
        open-in-view: false
        # properties:
            # hibernate:
                # dialect: org.hibernate.dialect.PostgreSQLDialect

management:
  endpoint:
    health:
      show-details: always
      enabled: true
  endpoints:
    web:
      exposure:
        include:
            - health
  health:
    circuitbreakers:
      enabled: true

resilience4j:
  circuitbreaker:
    instances:
      ratingHotelBreaker:
        register-health-indicator: true
        event-consumer-buffer-size: 10
        failure-rate-threshold: 50
        minimum-number-of-calls: 5
        automatic-transition-from-open-to-half-open-enabled: true
        wait-duration-in-open-state: 5s
        permitted-number-of-calls-in-half-open-state: 3
        sliding-window-size: 10
        sliding-window-type: count-based
  retry:
    instances:
      ratingHotelService:
        max-attempts: 3 
        wait-duration: 2s

  ratelimiter:
    instances:
      userRateLimiter:
        limit-refresh-period: 4s
        limit-for-period: 2
        timeout-duration: 2s
# fetching this data from config server (config.import)
# eureka:
#   client:
#     fetch-registry: true
#     register-with-eureka: true
#     serviceUrl:
#       defaultZone: http://localhost:8761/eureka/
#   instance:
#     preferIpAddress: true # Optional, for preferring IP address in registration

okta:
  oauth2:
    issuer: https://dev-85492826.okta.com/oauth2/default
    audience: api://default
    client-id: 0oai9djxt0QuHtCmk5d7
    client-secret: Xrry9fLwUpcV4eTRlZQcOUq9HyhrnmyfVhDwFA3vgyKErZRR5RwvkvGhZHtG1536
    scopes: openid, profile, email, offline_access







